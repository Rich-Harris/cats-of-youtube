var app = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function addLoc(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function destroyDev(detach) {
		destroy.call(this, detach);
		this.destroy = function() {
			console.warn('Component was already destroyed');
		};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function run(fn) {
		fn();
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function setDev(newState) {
		if (typeof newState !== 'object') {
			throw new Error(
				this._debugName + '.set was called without an object of data key-values to update.'
			);
		}

		this._checkReadOnly(newState);
		set.call(this, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var protoDev = {
		destroy: destroyDev,
		get,
		fire,
		on,
		set: setDev,
		_recompute: noop,
		_set,
		_mount,
		_differs
	};

	/* src/YouTubePlayer.html generated by Svelte v2.10.1 */

	const ready = new Promise((fulfil, reject) => {
		window.onYouTubeIframeAPIReady = () => {
			fulfil();
			delete window.onYouTubeIframeAPIReady;
		};

		const scr = document.createElement('script');
		scr.src = 'https://www.youtube.com/iframe_api';
		document.body.appendChild(scr);

		scr.onerror = reject;
	});

	var methods = {
		setup() {
			const { id } = this.get();

			const player = this.player = new YT.Player(this.refs.player, {
				width: '100%',
				height: '100%',
				videoId: id,
				events: {
					onReady: event => {
						player.playVideo();
					}
				}
			});
		}
	};

	async function oncreate() {
		await ready;

		this.setup();

		this.on('state', ({ changed, current }) => {
			if (changed.id) {
				this.player.destroy();
				this.setup();
			}
		});
	}
	function ondestroy() {
		if (this.player) this.player.destroy();
	}
	const file = "src/YouTubePlayer.html";

	function create_main_fragment(component, ctx) {
		var div, div_1, div_2, current;

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				div_2 = createElement("div");
				addLoc(div_2, file, 2, 2, 57);
				div_1.className = "player-inner svelte-1x601te";
				addLoc(div_1, file, 1, 1, 28);
				div.className = "player-outer svelte-1x601te";
				addLoc(div, file, 0, 0, 0);
			},

			m: function mount(target, anchor) {
				insert(target, div, anchor);
				append(div, div_1);
				append(div_1, div_2);
				component.refs.player = div_2;
				current = true;
			},

			p: noop,

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: run,

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div);
				}

				if (component.refs.player === div_2) component.refs.player = null;
			}
		};
	}

	function YouTubePlayer(options) {
		this._debugName = '<YouTubePlayer>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this.refs = {};
		this._state = assign({}, options.data);
		this._intro = !!options.intro;

		this._handlers.destroy = [ondestroy];

		if (!options.root) {
			this._oncreate = [];
		}

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			callAll(this._oncreate);
		}

		this._intro = true;
	}

	assign(YouTubePlayer.prototype, protoDev);
	assign(YouTubePlayer.prototype, methods);

	YouTubePlayer.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	/* src/App.html generated by Svelte v2.10.1 */

	const file$1 = "src/App.html";

	function create_main_fragment$1(component, ctx) {
		var main, h1, text, text_1, text_2, text_3, div, current_block_type_index, if_block, current;

		var each_value = ctx.cats;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		var if_block_creators = [
			create_if_block,
			create_if_block_1
		];

		var if_blocks = [];

		function select_block_type(ctx) {
			if (ctx.selected) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](component, ctx);

		return {
			c: function create() {
				main = createElement("main");
				h1 = createElement("h1");
				text = createText("The Cats of YouTube");
				text_1 = createText("\n\n\t");

				{
					const { cats } = ctx;
					console.log({ cats });
					debugger;
				}

				text_2 = createText("\n\n\t");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_3 = createText("\n\n\t");
				div = createElement("div");
				if_block.c();
				h1.className = "svelte-255j2w";
				addLoc(h1, file$1, 1, 1, 8);
				div.className = "selection svelte-255j2w";
				addLoc(div, file$1, 17, 1, 316);
				main.className = "svelte-255j2w";
				addLoc(main, file$1, 0, 0, 0);
			},

			m: function mount(target, anchor) {
				insert(target, main, anchor);
				append(main, h1);
				append(h1, text);
				append(main, text_1);
				append(main, text_2);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(main, null);
				}

				append(main, text_3);
				append(main, div);
				if_blocks[current_block_type_index].m(div, null);
				current = true;
			},

			p: function update(changed, ctx) {
				if (changed.cats) {
					const { cats } = ctx;
					console.log({ cats });
					debugger;
				}

				if (changed.cats || changed.selected) {
					each_value = ctx.cats;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(main, text_3);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}

				var previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);
				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(changed, ctx);
				} else {
					if_block.o(function() {
						if_blocks[previous_block_index].d(1);
						if_blocks[previous_block_index] = null;
					});

					if_block = if_blocks[current_block_type_index];
					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](component, ctx);
						if_block.c();
					}
					if_block.m(div, null);
				}
			},

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: function outro(outrocallback) {
				if (!current) return;

				if_block.o(outrocallback);
				current = false;
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(main);
				}

				destroyEach(each_blocks, detach);

				if_blocks[current_block_type_index].d();
			}
		};
	}

	// (6:1) {#each cats as cat}
	function create_each_block(component, ctx) {
		var figure, img, img_alt_value, img_class_value, img_src_value, text, figcaption, text_1_value = ctx.cat.name, text_1;

		return {
			c: function create() {
				figure = createElement("figure");
				img = createElement("img");
				text = createText("\n\t\t\t");
				figcaption = createElement("figcaption");
				text_1 = createText(text_1_value);
				img._svelte = { component, ctx };

				addListener(img, "click", click_handler);
				img.alt = img_alt_value = "" + ctx.cat.name + " thumbnail";
				img.className = img_class_value = "" + (ctx.cat === ctx.selected ? 'selected' : '') + " svelte-255j2w";
				img.src = img_src_value = "thumbnails/" + ctx.cat.thumbnail;
				addLoc(img, file$1, 7, 3, 89);
				figcaption.className = "svelte-255j2w";
				addLoc(figcaption, file$1, 13, 3, 257);
				figure.className = "svelte-255j2w";
				addLoc(figure, file$1, 6, 2, 77);
			},

			m: function mount(target, anchor) {
				insert(target, figure, anchor);
				append(figure, img);
				append(figure, text);
				append(figure, figcaption);
				append(figcaption, text_1);
			},

			p: function update(changed, ctx) {
				img._svelte.ctx = ctx;
				if ((changed.cats) && img_alt_value !== (img_alt_value = "" + ctx.cat.name + " thumbnail")) {
					img.alt = img_alt_value;
				}

				if ((changed.cats || changed.selected) && img_class_value !== (img_class_value = "" + (ctx.cat === ctx.selected ? 'selected' : '') + " svelte-255j2w")) {
					img.className = img_class_value;
				}

				if ((changed.cats) && img_src_value !== (img_src_value = "thumbnails/" + ctx.cat.thumbnail)) {
					img.src = img_src_value;
				}

				if ((changed.cats) && text_1_value !== (text_1_value = ctx.cat.name)) {
					setData(text_1, text_1_value);
				}
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(figure);
				}

				removeListener(img, "click", click_handler);
			}
		};
	}

	// (19:2) {#if selected}
	function create_if_block(component, ctx) {
		var text, current;

		var youtubeplayer_initial_data = { id: ctx.selected.id };
		var youtubeplayer = new YouTubePlayer({
			root: component.root,
			store: component.store,
			data: youtubeplayer_initial_data
		});

		return {
			c: function create() {
				{
					const { selected } = ctx;
					console.log({ selected });
					debugger;
				}

				text = createText("\n\t\t\t");
				youtubeplayer._fragment.c();
			},

			m: function mount(target, anchor) {
				insert(target, text, anchor);
				youtubeplayer._mount(target, anchor);
				current = true;
			},

			p: function update(changed, ctx) {
				if (changed.selected) {
					const { selected } = ctx;
					console.log({ selected });
					debugger;
				}

				var youtubeplayer_changes = {};
				if (changed.selected) youtubeplayer_changes.id = ctx.selected.id;
				youtubeplayer._set(youtubeplayer_changes);
			},

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: function outro(outrocallback) {
				if (!current) return;

				youtubeplayer._fragment.o(outrocallback);
				current = false;
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(text);
				}

				youtubeplayer.destroy(detach);
			}
		};
	}

	// (22:2) {:else}
	function create_if_block_1(component, ctx) {
		var p, text, current;

		return {
			c: function create() {
				p = createElement("p");
				text = createText("Click on a cat 😺");
				p.className = "svelte-255j2w";
				addLoc(p, file$1, 22, 3, 428);
			},

			m: function mount(target, anchor) {
				insert(target, p, anchor);
				append(p, text);
				current = true;
			},

			p: noop,

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: run,

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(p);
				}
			}
		};
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.cat = list[i];
		child_ctx.each_value = list;
		child_ctx.cat_index = i;
		return child_ctx;
	}

	function click_handler(event) {
		const { component, ctx } = this._svelte;

		component.set({ selected: ctx.cat });
	}

	function App(options) {
		this._debugName = '<App>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this._state = assign({}, options.data);
		if (!('cats' in this._state)) console.warn("<App> was created without expected data property 'cats'");
		if (!('selected' in this._state)) console.warn("<App> was created without expected data property 'selected'");
		this._intro = !!options.intro;

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$1(this, this._state);

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}

		this._intro = true;
	}

	assign(App.prototype, protoDev);

	App.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	// https://www.youtube.com/watch?v=

	var app = new App({
		target: document.body,
		data: {
			selected: null,
			cats: [
				{
					name: "Keyboard Cat",
					id: "J---aiyznGQ",
					thumbnail: 'keyboard-cat.jpg'
				},
				{
					name: "Maru",
					id: "z_AbfPXTKms",
					thumbnail: 'maru.jpg'
				},
				{
					name: "Henri",
					id: "OUtn3pvWmpg",
					thumbnail: 'henri.jpg'
				}
			]
		}
	});

	return app;

}());
//# sourceMappingURL=bundle.js.map
